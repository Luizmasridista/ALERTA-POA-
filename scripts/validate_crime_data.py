#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Valida√ß√£o dos Dados de Criminalidade com Fontes de Not√≠cias

Este script valida os dados gerados pelo modelo de distribui√ß√£o de crimes
com informa√ß√µes obtidas de not√≠cias e fontes oficiais.

Autor: Sistema de An√°lise de Criminalidade
Data: 2025-01-21
"""

import pandas as pd
import json
from datetime import datetime
import os

def load_integrated_data():
    """
    Carrega os dados integrados de criminalidade.
    """
    try:
        df = pd.read_csv('integrated_crime_data.csv')
        print(f"‚úÖ Dados integrados carregados: {len(df)} registros")
        return df
    except FileNotFoundError:
        print("‚ùå Arquivo de dados integrados n√£o encontrado")
        return None

def validate_centro_historico(df):
    """
    Valida dados do Centro Hist√≥rico com informa√ß√µes das not√≠cias.
    
    Dados das not√≠cias (1¬∫ semestre 2024):
    - Centro Hist√≥rico: 2.266 ocorr√™ncias (1.572 furtos + 645 roubos + 49 outros)
    - Redu√ß√£o de 26% nos furtos vs 2023
    - Redu√ß√£o de 66% nos roubos de ve√≠culos vs 2023
    - Redu√ß√£o de 49% nos demais roubos vs 2023
    """
    print("\nüîç VALIDA√á√ÉO - CENTRO HIST√ìRICO")
    print("=" * 50)
    
    centro_data = df[df['bairro'].str.contains('Centro', case=False, na=False)]
    
    if centro_data.empty:
        print("‚ùå Dados do Centro Hist√≥rico n√£o encontrados")
        return
    
    # An√°lise por per√≠odo (1¬∫ semestre 2024)
    centro_2024 = centro_data[centro_data['data'].str.contains('2024', na=False)]
    
    print(f"üìä Registros do Centro Hist√≥rico em 2024: {len(centro_2024)}")
    
    if not centro_2024.empty:
        # An√°lise por tipo de crime
        crimes_centro = centro_2024['tipo_crime'].value_counts()
        print("\nüìà Distribui√ß√£o por tipo de crime:")
        for crime, count in crimes_centro.head(10).items():
            print(f"   ‚Ä¢ {crime}: {count} casos")
        
        # Compara√ß√£o com dados das not√≠cias
        furtos = centro_2024[centro_2024['tipo_crime'].str.contains('Furto', case=False, na=False)]
        roubos = centro_2024[centro_2024['tipo_crime'].str.contains('Roubo', case=False, na=False)]
        
        print(f"\nüîç Compara√ß√£o com dados oficiais (1¬∫ sem. 2024):")
        print(f"   ‚Ä¢ Furtos modelo: {len(furtos)} vs Oficial: 1.572")
        print(f"   ‚Ä¢ Roubos modelo: {len(roubos)} vs Oficial: 645")
        print(f"   ‚Ä¢ Total modelo: {len(centro_2024)} vs Oficial: 2.266")
        
        # C√°lculo de precis√£o
        if len(centro_2024) > 0:
            precisao = min(len(centro_2024) / 2266, 2266 / len(centro_2024)) * 100
            print(f"   ‚Ä¢ Precis√£o estimada: {precisao:.1f}%")
    
    return centro_data

def validate_top_neighborhoods(df):
    """
    Valida os bairros com mais crimes segundo as not√≠cias.
    
    Top 10 bairros com mais roubos a pedestres (1¬∫ sem. 2023):
    1. Centro Hist√≥rico: 948 casos
    2. Rubem Berta: 310 casos
    3. Sarandi: casos n√£o especificados
    4. Cidade Baixa: 214 casos (aumento de 24,4%)
    5. Restinga: 129 casos
    """
    print("\nüîç VALIDA√á√ÉO - TOP BAIRROS VIOLENTOS")
    print("=" * 50)
    
    # An√°lise dos bairros mais mencionados nas not√≠cias
    bairros_validacao = {
        'Centro Hist√≥rico': {'roubos_pedestres_2023': 948, 'furtos_2024_sem1': 1572},
        'Rubem Berta': {'roubos_pedestres_2023': 310},
        'Cidade Baixa': {'roubos_pedestres_2023': 214},
        'Restinga': {'roubos_pedestres_2023': 129, 'homicidios_2017': 45},
        'Vila Jardim': {'homicidios_2016': 34, 'homicidios_2017': 10},
        'Praia de Belas': {'total_ocorrencias_2024_sem1': 558}
    }
    
    print("üìä Compara√ß√£o modelo vs dados oficiais:")
    
    for bairro, dados_oficiais in bairros_validacao.items():
        bairro_data = df[df['bairro'].str.contains(bairro, case=False, na=False)]
        
        if not bairro_data.empty:
            total_modelo = len(bairro_data)
            print(f"\nüèòÔ∏è  {bairro}:")
            print(f"   ‚Ä¢ Total modelo: {total_modelo} registros")
            
            # An√°lise por tipo de crime se dispon√≠vel
            crimes = bairro_data['tipo_crime'].value_counts()
            for crime, count in crimes.head(3).items():
                print(f"   ‚Ä¢ {crime}: {count} casos")
            
            # Compara√ß√£o com dados oficiais
            for tipo, valor in dados_oficiais.items():
                print(f"   ‚Ä¢ {tipo.replace('_', ' ').title()}: {valor} (oficial)")
        else:
            print(f"\n‚ùå {bairro}: N√£o encontrado no modelo")

def validate_crime_trends(df):
    """
    Valida tend√™ncias de criminalidade mencionadas nas not√≠cias.
    """
    print("\nüîç VALIDA√á√ÉO - TEND√äNCIAS DE CRIMINALIDADE")
    print("=" * 50)
    
    # An√°lise temporal
    if 'data' in df.columns:
        df['ano'] = pd.to_datetime(df['data'], errors='coerce').dt.year
        crimes_por_ano = df.groupby('ano').size()
        
        print("üìà Evolu√ß√£o temporal dos crimes:")
        for ano, total in crimes_por_ano.items():
            if pd.notna(ano):
                print(f"   ‚Ä¢ {int(ano)}: {total} registros")
    
    # An√°lise por zona geogr√°fica
    if 'zona' in df.columns:
        crimes_por_zona = df['zona'].value_counts()
        print("\nüó∫Ô∏è  Distribui√ß√£o por zona:")
        for zona, total in crimes_por_zona.items():
            percentual = (total / len(df)) * 100
            print(f"   ‚Ä¢ {zona}: {total} registros ({percentual:.1f}%)")
    
    # Tipos de crime mais comuns
    crimes_comuns = df['tipo_crime'].value_counts().head(10)
    print("\nüéØ Top 10 tipos de crime:")
    for i, (crime, total) in enumerate(crimes_comuns.items(), 1):
        percentual = (total / len(df)) * 100
        print(f"   {i:2d}. {crime}: {total} casos ({percentual:.1f}%)")

def generate_validation_report(df):
    """
    Gera relat√≥rio de valida√ß√£o completo.
    """
    print("\nüìã RELAT√ìRIO DE VALIDA√á√ÉO")
    print("=" * 60)
    
    # Estat√≠sticas gerais
    print(f"üìä Total de registros analisados: {len(df):,}")
    print(f"üìç Bairros √∫nicos: {df['bairro'].nunique()}")
    print(f"üö® Tipos de crime √∫nicos: {df['tipo_crime'].nunique()}")
    
    # Per√≠odo de dados
    if 'data' in df.columns:
        datas_validas = pd.to_datetime(df['data'], errors='coerce').dropna()
        if not datas_validas.empty:
            print(f"üìÖ Per√≠odo: {datas_validas.min().strftime('%Y-%m-%d')} a {datas_validas.max().strftime('%Y-%m-%d')}")
    
    # Qualidade dos dados
    print("\nüîç Qualidade dos dados:")
    print(f"   ‚Ä¢ Registros com bairro: {df['bairro'].notna().sum():,} ({(df['bairro'].notna().sum()/len(df)*100):.1f}%)")
    print(f"   ‚Ä¢ Registros com tipo de crime: {df['tipo_crime'].notna().sum():,} ({(df['tipo_crime'].notna().sum()/len(df)*100):.1f}%)")
    
    if 'fonte' in df.columns:
        fontes = df['fonte'].value_counts()
        print("\nüìö Distribui√ß√£o por fonte:")
        for fonte, total in fontes.items():
            percentual = (total / len(df)) * 100
            print(f"   ‚Ä¢ {fonte}: {total:,} registros ({percentual:.1f}%)")
    
    # Limita√ß√µes identificadas
    print("\n‚ö†Ô∏è  LIMITA√á√ïES IDENTIFICADAS:")
    print("   ‚Ä¢ Dados do modelo s√£o estimativas baseadas em pesquisa de 2016-2017")
    print("   ‚Ä¢ Distribui√ß√£o por bairros pode n√£o refletir realidade atual")
    print("   ‚Ä¢ Necess√°ria valida√ß√£o cont√≠nua com dados oficiais")
    print("   ‚Ä¢ Alguns bairros podem ter sub ou super-representa√ß√£o")
    
    # Recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")
    print("   ‚Ä¢ Atualizar modelo com dados mais recentes quando dispon√≠veis")
    print("   ‚Ä¢ Implementar sistema de valida√ß√£o autom√°tica")
    print("   ‚Ä¢ Coletar feedback de usu√°rios sobre precis√£o")
    print("   ‚Ä¢ Monitorar tend√™ncias e ajustar pesos do modelo")
    
    return {
        'total_registros': len(df),
        'bairros_unicos': df['bairro'].nunique(),
        'tipos_crime_unicos': df['tipo_crime'].nunique(),
        'qualidade_bairro': (df['bairro'].notna().sum()/len(df)*100),
        'qualidade_crime': (df['tipo_crime'].notna().sum()/len(df)*100)
    }

def save_validation_results(validation_data):
    """
    Salva resultados da valida√ß√£o.
    """
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Salvar metadados da valida√ß√£o
    validation_metadata = {
        'timestamp': timestamp,
        'validation_date': datetime.now().isoformat(),
        'data_sources': [
            'GauchaZH - Centro Hist√≥rico furtos 2024',
            'GauchaZH - Roubos a pedestres 2023',
            'GauchaZH - Bairros violentos 2017-2018',
            'Veja - Ranking bairros inseguros',
            'SSP-RS - Indicadores criminais'
        ],
        'validation_metrics': validation_data,
        'notes': [
            'Valida√ß√£o baseada em not√≠cias e dados oficiais parciais',
            'Modelo usa estimativas da pesquisa UFRGS 2016-2017',
            'Necess√°ria atualiza√ß√£o cont√≠nua com dados oficiais'
        ]
    }
    
    with open(f'validation_results_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(validation_metadata, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ Resultados da valida√ß√£o salvos em: validation_results_{timestamp}.json")

def main():
    """
    Fun√ß√£o principal de valida√ß√£o.
    """
    print("üîç INICIANDO VALIDA√á√ÉO DOS DADOS DE CRIMINALIDADE")
    print("=" * 60)
    print(f"üìÖ Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Carregar dados
    df = load_integrated_data()
    if df is None:
        return
    
    # Executar valida√ß√µes
    validate_centro_historico(df)
    validate_top_neighborhoods(df)
    validate_crime_trends(df)
    
    # Gerar relat√≥rio
    validation_data = generate_validation_report(df)
    
    # Salvar resultados
    save_validation_results(validation_data)
    
    print("\n‚úÖ Valida√ß√£o conclu√≠da com sucesso!")
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("   1. Analisar discrep√¢ncias identificadas")
    print("   2. Ajustar pesos do modelo se necess√°rio")
    print("   3. Coletar mais dados oficiais para valida√ß√£o")
    print("   4. Implementar monitoramento cont√≠nuo")
    print("   5. Documentar limita√ß√µes para usu√°rios")

if __name__ == "__main__":
    main()